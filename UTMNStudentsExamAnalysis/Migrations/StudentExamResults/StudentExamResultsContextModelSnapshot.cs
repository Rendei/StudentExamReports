// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UTMNStudentsExamAnalysis;

#nullable disable

namespace UTMNStudentsExamAnalysis.Migrations.StudentExamResults
{
    [DbContext(typeof(StudentExamResultsContext))]
    partial class StudentExamResultsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UTMNStudentsExamAnalysis.Models.Answer", b =>
                {
                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uuid")
                        .HasColumnName("answer_id");

                    b.Property<string>("NumberInPart")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("number_in_part");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("part_number");

                    b.Property<int>("Points")
                        .HasColumnType("integer")
                        .HasColumnName("points");

                    b.Property<int>("ResultId")
                        .HasColumnType("integer")
                        .HasColumnName("result_id");

                    b.HasKey("AnswerId")
                        .HasName("answers_pkey");

                    b.ToTable("answers", (string)null);
                });

            modelBuilder.Entity("UTMNStudentsExamAnalysis.Models.Area", b =>
                {
                    b.Property<int>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("area_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AreaId"));

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("area_name");

                    b.HasKey("AreaId")
                        .HasName("areas_pkey");

                    b.ToTable("areas", (string)null);
                });

            modelBuilder.Entity("UTMNStudentsExamAnalysis.Models.Competention", b =>
                {
                    b.Property<int>("CompetentionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("competention_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CompetentionId"));

                    b.Property<string>("CompetitionText")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("character varying(511)")
                        .HasColumnName("competition_text");

                    b.HasKey("CompetentionId")
                        .HasName("competentions_pkey");

                    b.ToTable("competentions", (string)null);
                });

            modelBuilder.Entity("UTMNStudentsExamAnalysis.Models.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("report_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReportId"));

                    b.Property<int?>("AreaId")
                        .HasColumnType("integer")
                        .HasColumnName("area_id");

                    b.Property<DateOnly?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("ReportDataId")
                        .HasColumnType("integer")
                        .HasColumnName("report_data_id");

                    b.Property<int?>("SchoolCode")
                        .HasColumnType("integer")
                        .HasColumnName("school_code");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("ReportId")
                        .HasName("reports_pkey");

                    b.HasIndex("AreaId");

                    b.HasIndex("ReportDataId");

                    b.HasIndex("SchoolCode");

                    b.ToTable("reports", (string)null);
                });

            modelBuilder.Entity("UTMNStudentsExamAnalysis.Models.ReportsData", b =>
                {
                    b.Property<int>("ReportsDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("reports_data_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReportsDataId"));

                    b.Property<int[]>("ClassIds")
                        .HasColumnType("integer[]")
                        .HasColumnName("class_ids");

                    b.Property<int[]>("SchoolIds")
                        .HasColumnType("integer[]")
                        .HasColumnName("school_ids");

                    b.Property<int[]>("SubjectIds")
                        .HasColumnType("integer[]")
                        .HasColumnName("subject_ids");

                    b.Property<int[]>("TypeIds")
                        .HasColumnType("integer[]")
                        .HasColumnName("type_ids");

                    b.HasKey("ReportsDataId")
                        .HasName("reports_data_pkey");

                    b.ToTable("reports_data", (string)null);
                });

            modelBuilder.Entity("UTMNStudentsExamAnalysis.Models.Result", b =>
                {
                    b.Property<int>("ResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("result_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ResultId"));

                    b.Property<int>("CompletionPercent")
                        .HasColumnType("integer")
                        .HasColumnName("completion_percent");

                    b.Property<string>("FirstPartAnswers")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("first_part_answers");

                    b.Property<int>("FirstPartPrimaryPoints")
                        .HasColumnType("integer")
                        .HasColumnName("first_part_primary_points");

                    b.Property<int?>("Mark")
                        .HasColumnType("integer")
                        .HasColumnName("mark");

                    b.Property<int>("PrimaryPoints")
                        .HasColumnType("integer")
                        .HasColumnName("primary_points");

                    b.Property<string>("SecondPartAnswers")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("second_part_answers");

                    b.Property<int>("SecondPartPrimaryPoints")
                        .HasColumnType("integer")
                        .HasColumnName("second_part_primary_points");

                    b.Property<int>("SecondaryPoints")
                        .HasColumnType("integer")
                        .HasColumnName("secondary_points");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid")
                        .HasColumnName("student_id");

                    b.Property<int?>("TestTemplateId")
                        .HasColumnType("integer")
                        .HasColumnName("test_template_id");

                    b.Property<string>("ThirdPartAnswers")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("third_part_answers");

                    b.Property<int>("ThirdPartPrimaryPoints")
                        .HasColumnType("integer")
                        .HasColumnName("third_part_primary_points");

                    b.HasKey("ResultId")
                        .HasName("results_pkey");

                    b.HasIndex("StudentId");

                    b.HasIndex("TestTemplateId");

                    b.ToTable("results", (string)null);
                });

            modelBuilder.Entity("UTMNStudentsExamAnalysis.Models.School", b =>
                {
                    b.Property<int>("SchoolCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("school_code");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SchoolCode"));

                    b.Property<int?>("AreaId")
                        .HasColumnType("integer")
                        .HasColumnName("area_id");

                    b.Property<string>("LawAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("law_address");

                    b.Property<int?>("SchoolKindId")
                        .HasColumnType("integer")
                        .HasColumnName("school_kind_id");

                    b.Property<string>("ShortName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("short_name");

                    b.Property<int?>("TownTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("town_type_id");

                    b.HasKey("SchoolCode")
                        .HasName("schools_pkey");

                    b.HasIndex("AreaId");

                    b.HasIndex("SchoolKindId");

                    b.HasIndex("TownTypeId");

                    b.ToTable("schools", (string)null);
                });

            modelBuilder.Entity("UTMNStudentsExamAnalysis.Models.SchoolKind", b =>
                {

                    b.Property<int>("SchoolKindId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("school_kind_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SchoolKindId"));

                    b.Property<string>("SchoolKindName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("school_kind_name");

                    b.HasKey("SchoolKindId")
                        .HasName("school_kinds_pkey");

                    b.ToTable("school_kinds", (string)null);
                });

            modelBuilder.Entity("UTMNStudentsExamAnalysis.Models.Student", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid")
                        .HasColumnName("student_id");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("class");

                    b.Property<int>("SchoolCode")
                        .HasColumnType("integer")
                        .HasColumnName("school_code");

                    b.Property<string>("Sex")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("sex");

                    b.Property<int?>("StudentCategory")
                        .HasColumnType("integer")
                        .HasColumnName("student_category");

                    b.HasKey("StudentId")
                        .HasName("students_pkey");

                    b.HasIndex("SchoolCode");

                    b.HasIndex("StudentCategory");

                    b.ToTable("students", (string)null);
                });

            modelBuilder.Entity("UTMNStudentsExamAnalysis.Models.StudentCategory", b =>
                {
                    b.Property<int>("StudentCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("student_category_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StudentCategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("category_name");

                    b.HasKey("StudentCategoryId")
                        .HasName("student_categories_pkey");

                    b.ToTable("student_categories", (string)null);
                });

            modelBuilder.Entity("UTMNStudentsExamAnalysis.Models.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("subject_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SubjectId"));

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("subject_name");

                    b.HasKey("SubjectId")
                        .HasName("subjects_pkey");

                    b.ToTable("subjects", (string)null);
                });

            modelBuilder.Entity("UTMNStudentsExamAnalysis.Models.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("task_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TaskId"));

                    b.Property<int>("CompetitionId")
                        .HasColumnType("integer")
                        .HasColumnName("competition_id");

                    b.Property<string>("Criteria")
                        .HasMaxLength(511)
                        .HasColumnType("character varying(511)")
                        .HasColumnName("criteria");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("difficulty");

                    b.Property<string>("NumberInPart")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("number_in_part");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("part_number");

                    b.Property<string>("TaskNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("task_number");

                    b.Property<int?>("TestTemplateId")
                        .HasColumnType("integer")
                        .HasColumnName("test_template_id");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("integer")
                        .HasColumnName("total_points");

                    b.HasKey("TaskId")
                        .HasName("tasks_pkey");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("TestTemplateId");

                    b.ToTable("tasks", (string)null);
                });

            modelBuilder.Entity("UTMNStudentsExamAnalysis.Models.TaskCompetention", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("integer")
                        .HasColumnName("task_id");

                    b.Property<int>("CompetentionId")
                        .HasColumnType("integer")
                        .HasColumnName("competention_id");

                    b.HasKey("TaskId", "CompetentionId")
                        .HasName("task_competentions_pkey");

                    b.ToTable("task_competentions", (string)null);
                });

            modelBuilder.Entity("UTMNStudentsExamAnalysis.Models.TestTemplate", b =>
                {
                    b.Property<int>("TestTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("test_template_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TestTemplateId"));

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("subject_id");

                    b.Property<int>("TestTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("test_type_id");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("year");

                    b.HasKey("TestTemplateId")
                        .HasName("test_templates_pkey");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TestTypeId");

                    b.ToTable("test_templates", (string)null);
                });

            modelBuilder.Entity("UTMNStudentsExamAnalysis.Models.TestType", b =>
                {
                    b.Property<int>("TestTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("test_type_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TestTypeId"));

                    b.Property<string>("TestTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("test_type_name");

                    b.HasKey("TestTypeId")
                        .HasName("test_type_pkey");

                    b.ToTable("test_type", (string)null);
                });

            modelBuilder.Entity("UTMNStudentsExamAnalysis.Models.TownType", b =>
                {
                    b.Property<int>("TownTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("town_type_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TownTypeId"));

                    b.Property<string>("TownTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("town_type_name");

                    b.HasKey("TownTypeId")
                        .HasName("town_types_pkey");

                    b.ToTable("town_types", (string)null);
                });

            modelBuilder.Entity("UTMNStudentsExamAnalysis.Models.Report", b =>
                {
                    b.HasOne("UTMNStudentsExamAnalysis.Models.Area", "Area")
                        .WithMany("Reports")
                        .HasForeignKey("AreaId")
                        .HasConstraintName("reports_area_code_fkey");

                    b.HasOne("UTMNStudentsExamAnalysis.Models.ReportsData", "ReportData")
                        .WithMany("Reports")
                        .HasForeignKey("ReportDataId")
                        .HasConstraintName("reports_report_data_id_fkey");

                    b.HasOne("UTMNStudentsExamAnalysis.Models.School", "SchoolCodeNavigation")
                        .WithMany("Reports")
                        .HasForeignKey("SchoolCode")
                        .HasConstraintName("reports_school_code_fkey");

                    b.Navigation("Area");

                    b.Navigation("ReportData");

                    b.Navigation("SchoolCodeNavigation");
                });

            modelBuilder.Entity("UTMNStudentsExamAnalysis.Models.Result", b =>
                {
                    b.HasOne("UTMNStudentsExamAnalysis.Models.Student", "Student")
                        .WithMany("Results")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("results_student_id_fkey");

                    b.HasOne("UTMNStudentsExamAnalysis.Models.TestTemplate", "TestTemplate")
                        .WithMany("Results")
                        .HasForeignKey("TestTemplateId")
                        .HasConstraintName("results_test_template_id_fkey");

                    b.Navigation("Student");

                    b.Navigation("TestTemplate");
                });

            modelBuilder.Entity("UTMNStudentsExamAnalysis.Models.School", b =>
                {
                    b.HasOne("UTMNStudentsExamAnalysis.Models.Area", "Area")
                        .WithMany("Schools")
                        .HasForeignKey("AreaId")
                        .HasConstraintName("schools_area_id_fkey");

                    b.HasOne("UTMNStudentsExamAnalysis.Models.SchoolKind", "SchoolKind")
                        .WithMany("Schools")
                        .HasForeignKey("SchoolKindId")
                        .HasConstraintName("schools_school_kind_id_fkey");

                    b.HasOne("UTMNStudentsExamAnalysis.Models.TownType", "TownType")
                        .WithMany("Schools")
                        .HasForeignKey("TownTypeId")
                        .HasConstraintName("schools_town_type_id_fkey");

                    b.Navigation("Area");

                    b.Navigation("SchoolKind");

                    b.Navigation("TownType");
                });

            modelBuilder.Entity("UTMNStudentsExamAnalysis.Models.Student", b =>
                {
                    b.HasOne("UTMNStudentsExamAnalysis.Models.School", "SchoolCodeNavigation")
                        .WithMany("Students")
                        .HasForeignKey("SchoolCode")
                        .IsRequired()
                        .HasConstraintName("students_school_code_fkey");

                    b.HasOne("UTMNStudentsExamAnalysis.Models.StudentCategory", "StudentCategoryNavigation")
                        .WithMany("Students")
                        .HasForeignKey("StudentCategory")
                        .HasConstraintName("students_student_category_fkey");

                    b.Navigation("SchoolCodeNavigation");

                    b.Navigation("StudentCategoryNavigation");
                });

            modelBuilder.Entity("UTMNStudentsExamAnalysis.Models.Task", b =>
                {
                    b.HasOne("UTMNStudentsExamAnalysis.Models.Competention", "Competition")
                        .WithMany("Tasks")
                        .HasForeignKey("CompetitionId")
                        .IsRequired()
                        .HasConstraintName("tasks_competition_id_fkey");

                    b.HasOne("UTMNStudentsExamAnalysis.Models.TestTemplate", "TestTemplate")
                        .WithMany("Tasks")
                        .HasForeignKey("TestTemplateId")
                        .HasConstraintName("tasks_test_template_id_fkey");

                    b.Navigation("Competition");

                    b.Navigation("TestTemplate");
                });

            modelBuilder.Entity("UTMNStudentsExamAnalysis.Models.TestTemplate", b =>
                {
                    b.HasOne("UTMNStudentsExamAnalysis.Models.Subject", "Subject")
                        .WithMany("TestTemplates")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("test_templates_subject_id_fkey");

                    b.HasOne("UTMNStudentsExamAnalysis.Models.TestType", "TestType")
                        .WithMany("TestTemplates")
                        .HasForeignKey("TestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("test_templates_test_type_id_fkey");

                    b.Navigation("Subject");

                    b.Navigation("TestType");
                });

            modelBuilder.Entity("UTMNStudentsExamAnalysis.Models.Area", b =>
                {
                    b.Navigation("Reports");

                    b.Navigation("Schools");
                });

            modelBuilder.Entity("UTMNStudentsExamAnalysis.Models.Competention", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("UTMNStudentsExamAnalysis.Models.ReportsData", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("UTMNStudentsExamAnalysis.Models.School", b =>
                {
                    b.Navigation("Reports");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("UTMNStudentsExamAnalysis.Models.SchoolKind", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("UTMNStudentsExamAnalysis.Models.Student", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("UTMNStudentsExamAnalysis.Models.StudentCategory", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("UTMNStudentsExamAnalysis.Models.Subject", b =>
                {
                    b.Navigation("TestTemplates");
                });

            modelBuilder.Entity("UTMNStudentsExamAnalysis.Models.TestTemplate", b =>
                {
                    b.Navigation("Results");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("UTMNStudentsExamAnalysis.Models.TestType", b =>
                {
                    b.Navigation("TestTemplates");
                });

            modelBuilder.Entity("UTMNStudentsExamAnalysis.Models.TownType", b =>
                {
                    b.Navigation("Schools");
                });
#pragma warning restore 612, 618
        }
    }
}
